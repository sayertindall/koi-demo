Directory structure:
└── blockscience-koi-net-hackmd-sensor-node/
    ├── README.md
    ├── koi-net-hackmd-sensor-node.service
    ├── LICENSE
    ├── requirements.txt
    ├── rid_types.py
    └── hackmd_sensor_node/
        ├── __init__.py
        ├── __main__.py
        ├── backfill.py
        ├── config.py
        ├── core.py
        ├── hackmd_api.py
        ├── handlers.py
        └── server.py


Files Content:

================================================
FILE: README.md
================================================
# koi-net-hackmd-sensor-node
 HackMD sensor node implementation for BlockScience's KOI-net 



================================================
FILE: koi-net-hackmd-sensor-node.service
================================================
[Unit]
Description=KOI-net HackMD Sensor Node Service
After=network.target

[Service]
WorkingDirectory=/home/dev/koi-net-hackmd-sensor-node
ExecStart=/home/dev/koi-net-hackmd-sensor-node/venv/bin/python3 -m hackmd_sensor_node
Restart=always

[Install]
WantedBy=multi-user.target


================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2025 BlockScience

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: requirements.txt
================================================
koi-net>=1.0.0b7
rid-lib>=3.2.3
rich
fastapi
uvicorn
python-dotenv
requests


================================================
FILE: rid_types.py
================================================
from rid_lib.core import ORN

class HackMDNote(ORN):
    namespace = "hackmd.note"
    
    def __init__(self, note_id: str):
        self.note_id = note_id
        
    @property
    def reference(self):
        return self.note_id
    
    @classmethod
    def from_reference(cls, reference):
        return cls(reference)    


================================================
FILE: hackmd_sensor_node/__init__.py
================================================
import logging
from rich.logging import RichHandler

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

rich_handler = RichHandler()
rich_handler.setLevel(logging.INFO)
rich_handler.setFormatter(logging.Formatter(
    "%(name)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
))

file_handler = logging.FileHandler("node-log.txt")
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(logging.Formatter(
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
))

# Add both
logger.addHandler(rich_handler)
logger.addHandler(file_handler)


================================================
FILE: hackmd_sensor_node/__main__.py
================================================
import uvicorn
from .config import HOST, PORT

uvicorn.run("hackmd_sensor_node.server:app", host=HOST, port=PORT, log_config=None)


================================================
FILE: hackmd_sensor_node/backfill.py
================================================
import logging
import asyncio
from rid_lib.ext import Bundle
from rid_types import HackMDNote
from . import hackmd_api
from .core import node

logger = logging.getLogger(__name__)

async def backfill(team_path="blockscience"):
    notes = await hackmd_api.async_request(f"/teams/{team_path}/notes")
    
    logger.debug(f"Found {len(notes)} in team")

    for note in notes:
        note_rid = HackMDNote(note["id"])
        
        note_bundle = Bundle.generate(
            rid=note_rid,
            contents=note
        )
        
        node.processor.handle(bundle=note_bundle)
        
if __name__ == "__main__":
    node.start()
    asyncio.run(
        backfill()
    )
    node.stop()


================================================
FILE: hackmd_sensor_node/config.py
================================================
import os
from dotenv import load_dotenv

load_dotenv()

HOST = "127.0.0.1"
PORT = 8002
URL = f"http://{HOST}:{PORT}/koi-net"

FIRST_CONTACT = "http://127.0.0.1:8000/koi-net"

HACKMD_API_TOKEN = os.environ["HACKMD_API_TOKEN"]


================================================
FILE: hackmd_sensor_node/core.py
================================================
import logging
from rid_types import HackMDNote
from koi_net import NodeInterface
from koi_net.protocol.node import NodeProfile, NodeType, NodeProvides
from koi_net.processor.default_handlers import (
    basic_rid_handler,
    edge_negotiation_handler,
    basic_network_output_filter
)
from .config import URL, FIRST_CONTACT

logger = logging.getLogger(__name__)


node = NodeInterface(
    name="hackmd-sensor",
    profile=NodeProfile(
        base_url=URL,
        node_type=NodeType.FULL,
        provides=NodeProvides(
            event=[HackMDNote],
            state=[HackMDNote]
        )
    ),
    use_kobj_processor_thread=True,
    first_contact=FIRST_CONTACT,
    handlers=[
        basic_rid_handler,
        edge_negotiation_handler,
        basic_network_output_filter
    ]
)

from . import handlers


================================================
FILE: hackmd_sensor_node/hackmd_api.py
================================================
import asyncio
import httpx
from .config import HACKMD_API_TOKEN

api_base_url = "https://api.hackmd.io/v1"

def request(path, method="GET"):
    resp = httpx.request(
        method=method,
        url=api_base_url+path,
        headers={
            "Authorization": "Bearer " + HACKMD_API_TOKEN
        }
    )

    if resp.status_code == 200:
        return resp.json()
    
    else:
        print(resp.status_code, resp.text)
        return

async def async_request(path, method="GET"):
    timeout = 60
    
    while True: 
        async with httpx.AsyncClient() as client:
            
            resp = await client.request(
                method=method,
                url=api_base_url+path,
                headers={
                    "Authorization": "Bearer " + HACKMD_API_TOKEN
                }
            )
        

        if resp.status_code == 200:
            return resp.json()

        elif resp.status_code == 429:
            print(resp.status_code, resp.text, f"retrying in {timeout} seconds")
            await asyncio.sleep(timeout)
            timeout *= 2
        else:
            print(resp.status_code, resp.text)
            return


================================================
FILE: hackmd_sensor_node/handlers.py
================================================
import logging
from multiprocessing import process
from koi_net.processor.handler import HandlerType, STOP_CHAIN
from koi_net.processor.knowledge_object import KnowledgeSource, KnowledgeObject
from koi_net.processor.interface import ProcessorInterface
from koi_net.protocol.event import EventType
from koi_net.protocol.edge import EdgeType
from koi_net.protocol.node import NodeProfile
from koi_net.protocol.helpers import generate_edge_bundle
from rid_lib.ext import Bundle
from rid_lib.types import KoiNetNode

from rid_types import HackMDNote
from .core import node
from . import hackmd_api

logger = logging.getLogger(__name__)


@node.processor.register_handler(HandlerType.Network, rid_types=[KoiNetNode])
def coordinator_contact(processor: ProcessorInterface, kobj: KnowledgeObject):
    # when I found out about a new node
    if kobj.normalized_event_type != EventType.NEW: 
        return
    
    node_profile = kobj.bundle.validate_contents(NodeProfile)
    
    # looking for event provider of nodes
    if KoiNetNode not in node_profile.provides.event:
        return
    
    logger.debug("Identified a coordinator!")
    logger.debug("Proposing new edge")
    
    # queued for processing
    processor.handle(bundle=generate_edge_bundle(
        source=kobj.rid,
        target=node.identity.rid,
        edge_type=EdgeType.WEBHOOK,
        rid_types=[KoiNetNode]
    ))
    
    logger.debug("Catching up on network state")
    
    rid_payload = processor.network.request_handler.fetch_rids(kobj.rid, rid_types=[KoiNetNode])
        
    rids = [
        rid for rid in rid_payload.rids 
        if rid != processor.identity.rid and 
        not processor.cache.exists(rid)
    ]
    
    bundle_payload = processor.network.request_handler.fetch_bundles(kobj.rid, rids=rids)
    
    for bundle in bundle_payload.bundles:
        # marked as external since we are handling RIDs from another node
        # will fetch remotely instead of checking local cache
        processor.handle(bundle=bundle, source=KnowledgeSource.External)
    logger.debug("Done")


@node.processor.register_handler(HandlerType.Manifest)
def custom_manifest_handler(processor: ProcessorInterface, kobj: KnowledgeObject):
    if type(kobj.rid) == HackMDNote:
        logger.debug("Skipping HackMD note manifest handling")
        return
    
    prev_bundle = processor.cache.read(kobj.rid)

    if prev_bundle:
        if kobj.manifest.sha256_hash == prev_bundle.manifest.sha256_hash:
            logger.debug("Hash of incoming manifest is same as existing knowledge, ignoring")
            return STOP_CHAIN
        if kobj.manifest.timestamp <= prev_bundle.manifest.timestamp:
            logger.debug("Timestamp of incoming manifest is the same or older than existing knowledge, ignoring")
            return STOP_CHAIN
        
        logger.debug("RID previously known to me, labeling as 'UPDATE'")
        kobj.normalized_event_type = EventType.UPDATE

    else:
        logger.debug("RID previously unknown to me, labeling as 'NEW'")
        kobj.normalized_event_type = EventType.NEW
        
    return kobj
    
    
@node.processor.register_handler(HandlerType.Bundle, rid_types=[HackMDNote])
def custom_hackmd_bundle_handler(processor: ProcessorInterface, kobj: KnowledgeObject):
    assert type(kobj.rid) == HackMDNote
    
    prev_bundle = processor.cache.read(kobj.rid)
    
    if prev_bundle:
        prevChangedAt = prev_bundle.contents["lastChangedAt"]
        currChangedAt = kobj.contents["lastChangedAt"]
        logger.debug(f"Changed at {prevChangedAt} -> {currChangedAt}")
        if currChangedAt > prevChangedAt:
            logger.debug("Incoming note has been changed more recently!")
            kobj.normalized_event_type = EventType.UPDATE
            
        else:
            logger.debug("Incoming note is not newer")
            return STOP_CHAIN
        
    else:
        logger.debug("Incoming note is previously unknown to me")
        kobj.normalized_event_type = EventType.NEW
        
    logger.debug("Retrieving full note...")
    data = hackmd_api.request(f"/notes/{kobj.rid.note_id}")
    
    if not data:
        logger.debug("Failed.")
        return STOP_CHAIN
    
    logger.debug("Done.")
    
    full_note_bundle = Bundle.generate(
        rid=kobj.rid,
        contents=data
    )
    
    kobj.manifest = full_note_bundle.manifest
    kobj.contents = full_note_bundle.contents
    
    return kobj


================================================
FILE: hackmd_sensor_node/server.py
================================================
import logging
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, APIRouter
from koi_net.processor.knowledge_object import KnowledgeSource
from koi_net.protocol.api_models import (
    PollEvents,
    FetchRids,
    FetchManifests,
    FetchBundles,
    EventsPayload,
    RidsPayload,
    ManifestsPayload,
    BundlesPayload
)
from koi_net.protocol.consts import (
    BROADCAST_EVENTS_PATH,
    POLL_EVENTS_PATH,
    FETCH_RIDS_PATH,
    FETCH_MANIFESTS_PATH,
    FETCH_BUNDLES_PATH
)
from .core import node
from .backfill import backfill


logger = logging.getLogger(__name__)


async def backfill_loop():
    while True:
        await backfill()
        await asyncio.sleep(600)

@asynccontextmanager
async def lifespan(app: FastAPI):    
    node.start()
    asyncio.create_task(
        backfill_loop()
    )
    
    yield
    node.stop()

app = FastAPI(
    lifespan=lifespan, 
    title="KOI-net Protocol API",
    version="1.0.0"
)


koi_net_router = APIRouter(
    prefix="/koi-net"
)

@koi_net_router.post(BROADCAST_EVENTS_PATH)
def broadcast_events(req: EventsPayload):
    logger.info(f"Request to {BROADCAST_EVENTS_PATH}, received {len(req.events)} event(s)")
    for event in req.events:
        logger.info(f"{event!r}")
        node.processor.handle(event=event, source=KnowledgeSource.External)
    

@koi_net_router.post(POLL_EVENTS_PATH)
def poll_events(req: PollEvents) -> EventsPayload:
    logger.info(f"Request to {POLL_EVENTS_PATH}")
    events = node.network.flush_poll_queue(req.rid)
    return EventsPayload(events=events)

@koi_net_router.post(FETCH_RIDS_PATH)
def fetch_rids(req: FetchRids) -> RidsPayload:
    return node.network.response_handler.fetch_rids(req)

@koi_net_router.post(FETCH_MANIFESTS_PATH)
def fetch_manifests(req: FetchManifests) -> ManifestsPayload:
    return node.network.response_handler.fetch_manifests(req)

@koi_net_router.post(FETCH_BUNDLES_PATH)
def fetch_bundles(req: FetchBundles) -> BundlesPayload:
    return node.network.response_handler.fetch_bundles(req)


app.include_router(koi_net_router)

